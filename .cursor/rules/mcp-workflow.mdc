---
description: 'MCP 工具使用和 Sequential Thinking 工作流程'
globs:
alwaysApply: true
---

# MCP 工作流程

## 🚨 重要原则：Sequential Thinking 优先

**对于任何问题、任务或决策，都必须首先使用 Sequential Thinking MCP 进行结构化分析。**

这不仅仅适用于复杂问题，而是所有场景的标准流程：

- 简单的代码修改
- 功能需求分析
- 技术问题调试
- 架构设计决策
- 代码审查反馈

## 标准工作流程

### 第一步：必须使用 Sequential Thinking

```
对于任何任务，首先调用 Sequential Thinking MCP：
1. 分析问题的本质和范围
2. 分解为可管理的步骤
3. 识别潜在的风险和挑战
4. 制定解决方案假设
5. 验证假设的可行性
```

### 第二步：选择合适的专门工具

#### Nx MCP 工具 (`nx_*`)

**何时使用**：

- 需要了解项目结构和配置
- 运行构建、测试、部署任务
- 生成新的项目或组件
- 分析项目依赖关系

**使用原则**：

- 在开始任何 Nx 相关任务前，先使用 workspace 工具了解当前状态
- 使用生成器创建标准化的项目结构
- 利用影响分析优化 CI/CD 流程

#### Context7 MCP 工具

**命令**: `npx -y @upstash/context7-mcp@latest`

**何时使用**：

- 查找特定库的文档
- 学习新的 API 或框架
- 解决第三方库使用问题
- 获取最新的库版本信息

#### MCP Feedback Enhanced 工具

**实际使用**: 直接调用 `mcp_mcp-feedback-enhanced_interactive_feedback` 函数

**何时使用**：

- 完成重要开发阶段后征求用户反馈
- 需要用户确认技术决策
- 迭代式开发的里程碑检查
- 出现问题时需要用户指导方向

**使用频率**：每个主要任务完成后必须使用

## 工具组合使用模式

### 场景 1：开发新功能

```
1. Sequential Thinking: 分析需求和技术方案
2. Nx MCP: 了解项目结构和生成组件
3. Context7: 查询相关技术文档
4. Feedback: 与用户确认实现方案
```

### 场景 2：问题诊断

```
1. Sequential Thinking: 分析问题原因和影响范围
2. Context7: 查找解决方案和最佳实践
3. Nx MCP: 检查项目配置和依赖
4. Feedback: 确认修复方案
```

### 场景 3：代码重构

```
1. Sequential Thinking: 分析重构的必要性和风险
2. Nx MCP: 分析项目依赖关系
3. Context7: 查询重构最佳实践
4. Feedback: 审查重构计划
```

### 场景 4：学习新技术

```
1. Sequential Thinking: 分析学习目标和计划
2. Context7: 获取技术文档和示例
3. Nx MCP: 创建学习项目
4. Feedback: 验证学习成果
```

## 工具使用最佳实践

### Sequential Thinking 使用指南

- **总是开始的第一步**：不管问题简单还是复杂
- **记录思考过程**：帮助团队理解决策逻辑
- **迭代思考**：可以回顾和修正之前的分析
- **分享洞察**：将重要的思考过程文档化

### 工具选择策略

- **专门工具优先**：对于特定领域的问题，优先使用对应的专门工具
- **组合使用**：复杂任务通常需要多个工具配合
- **用户参与**：重要决策要通过 Feedback 工具征求用户意见
- **文档先行**：在使用新技术前先查询相关文档

### 避免的反模式

- ❌ 跳过 Sequential Thinking 直接开始编码
- ❌ 不查询文档就使用不熟悉的技术
- ❌ 重要决策没有征求用户确认
- ❌ 忽视 Nx 工作区的架构约束
- ❌ 完成任务后不使用 Feedback 工具确认结果
- ❌ 修改代码后不进行类型检查和构建验证
- ❌ 重复犯同样的技术错误而不总结规律

## 团队协作原则

### 知识分享

- 使用 Sequential Thinking 的分析结果要与团队分享
- 通过 Context7 获取的有价值信息要记录到项目文档
- 重要的 Feedback 结果要形成团队决策

### 一致性

- 所有团队成员都要遵循相同的 MCP 工作流程
- 建立团队的 Sequential Thinking 模板和检查清单
- 定期回顾和改进工作流程

## 🔧 质量保证和验证流程

### 每次代码修改后的强制检查

**（基于实际踩坑经验，必须执行！）**

1. **立即验证循环**

   ```bash
   # 每次修改后立即执行
   pnpm exec nx typecheck @wenshu/web-app
   pnpm exec nx build @wenshu/web-app
   ```

2. **路径导入检查**

   ```bash
   # 确保没有循环依赖
   find libs -name "*.tsx" -exec grep -l "@/" {} \; | wc -l
   # 输出应该是 0
   ```

3. **使用 Feedback MCP 确认**
   - 总结完成的工作
   - 说明解决的问题和方法
   - 征求用户对结果的反馈

### 常见错误预防清单

- [ ] 是否使用了 Sequential Thinking 分析问题？
- [ ] 是否查询了相关技术文档？
- [ ] 是否使用了正确的导入路径？
- [ ] 是否运行了类型检查和构建验证？
- [ ] 是否将经验教训记录到规范中？
- [ ] 是否使用 Feedback MCP 确认了结果？

## 📈 持续改进

### 错误模式识别

每次遇到错误时：

1. 使用 Sequential Thinking 分析根本原因
2. 更新相关规范文件（typescript-frontend.mdc 或 error-debugging-checklist.mdc）
3. 考虑是否需要自动化检查
4. 分享经验给团队

### 规范文件维护

- **typescript-frontend.mdc**: TypeScript 和组件库相关规范
- **error-debugging-checklist.mdc**: 系统性错误调试流程
- **core-guidelines.mdc**: 基本开发原则
- **本文件**: MCP 工具使用流程

每个规范文件都应该基于实际经验持续更新！
