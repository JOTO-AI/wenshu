---
description: "核心开发原则和项目指导"
globs:
alwaysApply: true
---

# 核心开发指导

## 软件设计原则

### SOLID 原则
- **单一职责**: 每个类/模块只有一个改变的理由
- **开闭原则**: 对扩展开放，对修改关闭
- **里氏替换**: 子类可以替换基类
- **接口隔离**: 不依赖不使用的接口
- **依赖倒置**: 依赖抽象而不是具体实现

### 基本原则
- **DRY**: 不重复代码，提取共同逻辑
- **KISS**: 保持简单，避免过度设计
- **YAGNI**: 不实现当前不需要的功能
- **关注点分离**: 将不同关注点分离到不同模块

## Nx Monorepo 架构

### 项目结构
```
apps/          # 可部署应用：api (FastAPI), web-app (React)
libs/          # 共享库：api-client, shared-types, ui
```

### 开发原则
- 应用程序可以依赖库，但不能相互依赖
- 库可以依赖其他库，但避免循环依赖
- 使用 `nx graph` 可视化依赖关系
- 利用 `nx affected` 优化构建和测试

## 智能问数系统约定

### API 设计
- RESTful 接口设计
- 统一响应格式：`{ data, message, status, timestamp }`
- JWT 认证 + RBAC 权限控制

### 数据库设计
- UUID 主键
- 软删除（is_deleted）
- 审计字段（created_at, updated_at, created_by, updated_by）

### 前端架构
- 基于功能的目录结构
- TypeScript 严格模式
- Tailwind CSS + 响应式设计
- Zustand 状态管理

## 代码质量标准

### 命名和结构
- 使用有意义的名称，能够自我解释
- 函数小且专注于单一任务
- 避免深层嵌套（最多3层）
- 使用早期返回减少嵌套

### 错误处理
- 使用明确的错误类型
- 提供有意义的错误消息
- 优雅处理边界情况
- 记录适当的日志信息

### 测试策略
- 测试金字塔：更多单元测试，适量集成测试，少量 E2E
- 争取 80%+ 代码覆盖率
- 编写易于测试的代码

## 性能和安全

### 性能考虑
- 避免过早优化，但要意识到性能影响
- 使用适当的数据结构和算法
- 考虑缓存策略
- 监控和测量性能指标

### 安全原则
- 输入验证和清理
- 最小权限原则
- 安全编码实践
- 定期更新依赖项
